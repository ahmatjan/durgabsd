<?xml version="1.0"?>
<ReportItem id="32" color="red">
  <Name><![CDATA[Cross site scripting (verified)]]></Name>
  <ModuleName><![CDATA[Scripting (XSS.script)]]></ModuleName>
  <Details><![CDATA[URL encoded GET input <b><font color="dark">p</font></b> was set to <b><font color="dark">1'&quot;()&amp;%&lt;ScRiPt &gt;prompt(951846)&lt;/ScRiPt&gt;</font></b>]]></Details>
  <Affects><![CDATA[/hpp/params.php]]></Affects>
  <Parameter><![CDATA[p]]></Parameter>
  <AOP_SourceFile><![CDATA[]]></AOP_SourceFile>
  <AOP_SourceLine>0</AOP_SourceLine>
  <AOP_Additional><![CDATA[]]></AOP_Additional>
  <IsFalsePositive><![CDATA[False]]></IsFalsePositive>
  <Severity><![CDATA[high]]></Severity>
  <Type><![CDATA[Validation]]></Type>
  <Impact><![CDATA[Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a user in order to gather data from them.
An attacker can steal the session cookie and take over the account, impersonating the user.
It is also possible to modify the content of the page presented to the user.
]]></Impact>
  <Description><![CDATA[This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.<br/><br/>
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code (usually in the form of Javascript) to another user.
Because a browser cannot know if the script should be trusted or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens retained by the browser. ]]></Description>
  <DetailedInformation><![CDATA[<i>Quote from The Cross Site Scripting FAQ - http://www.cgisecurity.com/articles/xss-faq.shtml</i>

<h2>Introduction</h2>

<p>Websites today are more complex than ever, containing a lot of dynamic content making the experience for the user more enjoyable. Dynamic content is achieved through the use of web applications which can deliver different output to a user depending on their settings and needs. Dynamic websites suffer from a threat that static websites don't, called &quot;Cross Site Scripting&quot; (or XSS dubbed by other security professionals). Currently small informational tidbits about Cross Site Scripting holes exist but none really explain them to an average person or administrator. This FAQ was written to provide a better understanding of this emerging threat, and to give guidance on detection and prevention.</p>

<h2>&quot;What is Cross Site Scripting?&quot;</h2>

<p>Cross site scripting (also known as XSS) occurs when a web application gathers malicious data from a user. The data is usually gathered in the form of a hyperlink which contains malicious content within it. The user will most likely click on this link from another website, instant message, or simply just reading a web board or email message. Usually the attacker will encode the malicious portion of the link to the site in HEX (or other encoding methods) so the request is less suspicious looking to the user when clicked on. After the data is collected by the web application, it creates an output page for the user containing the malicious data that was originally sent to it, but in a manner to make it appear as valid content from the website. Many popular guestbook and forum programs allow users to submit posts with html and javascript embedded in them. If for example I was logged in as &quot;john&quot; and read a message by &quot;joe&quot; that contained malicious javascript in it, then it may be possible for &quot;joe&quot; to hijack my session just by reading his bulletin board post. Further details on how attacks like this are accomplished via &quot;cookie theft&quot; are explained in detail below.</p>

<h2>&quot;What does XSS and CSS mean?&quot;</h2>

<p>Often people refer to Cross Site Scripting as CSS. There has been a lot of confusion with Cascading Style Sheets (CSS) and cross site scripting. Some security people refer to Cross Site Scripting as XSS. If you hear someone say &quot;I found a XSS hole&quot;, they are talking about Cross Site Scripting for certain.</p>


<h2>&quot;What are the threats of Cross Site Scripting?&quot;</h2>

<p>Often attackers will inject JavaScript, VBScript, ActiveX, HTML, or Flash into a vulnerable application to fool a user (Read below for further details) in order to gather data from them. Everything from account hijacking, changing of user settings, cookie theft/poisoning, or false advertising is possible. New malicious uses are being found every day for XSS attacks. The post below by Brett Moore brings up a good point with regard to &quot;Denial Of Service&quot;, and potential &quot;auto-attacking&quot; of hosts if a user simply reads a post on a message board.</p>

<h2>&quot;What can I do to protect myself as a vendor?&quot;</h2>

<p>This is a simple answer. Never trust user input and always filter metacharacters. This will eliminate the majority of XSS attacks. Converting &lt; and &gt; to &amp;lt; and &amp;gt; is also suggested when it comes to script output. Remember XSS holes can be damaging and costly to your business if abused. Often attackers will disclose these holes to the public, which can erode customer and public confidence in the security and privacy of your organization's site. Filtering &lt; and &gt; alone will not solve all cross site scripting attacks and it is suggested you also attempt to filter out ( and ) by translating them to &amp;#40; and &amp;#41;, and also # and &amp; by translating them to &amp;#35 (#) and &amp;#38 (&amp;).</p>

<h2>&quot;What can I do to protect myself as a user?&quot;</h2>

<p>The easiest way to protect yourself as a user is to only follow links from the main website you wish to view. If you visit one website and it links to CNN for example, instead of clicking on it visit CNN's main site and use its search engine to find the content. This will probably eliminate ninety percent of the problem. Sometimes XSS can be executed automatically when you open an email, email attachment, read a guestbook, or bulletin board post. If you plan on opening an email, or reading a post on a public board from a person you don't know BE CAREFUL. One of the best ways to protect yourself is to turn off Javascript in your browser settings. In IE turn your security settings to high. This can prevent cookie theft, and in general is a safer thing to do.</p>

<h2>&quot;How common are XSS holes?&quot;</h2>

<p>Cross site scripting holes are gaining popularity among hackers as easy holes to find in large websites. Websites from FBI.gov, CNN.com, Time.com, Ebay, Yahoo, Apple computer, Microsoft, Zdnet, Wired, and Newsbytes have all had one form or another of XSS bugs.</p>

<p>Every month roughly 10-25 XSS holes are found in commercial products and advisories are published explaining the threat.</p>


<h2>&quot;Does encryption protect me?&quot;</h2>

<p>Websites that use SSL (https) are in no way more protected than websites that are not encrypted. The web applications work the same way as before, except the attack is taking place in an encrypted connection. People often think that because they see the lock on their browser it means everything is secure. This just isn't the case.</p>


<h2>&quot;Can XSS holes allow command execution?&quot;</h2>

<p>XSS holes can allow Javascript insertion, which may allow for limited execution. If an attacker were to exploit a browser flaw (browser hole) it could then be possible to execute commands on the client's side. If command execution were possible it would only be possible on the client side. In simple terms XSS holes can be used to help exploit other holes that may exist in your browser.</p>


<h2>&quot;What if I don't feel like fixing a CSS/XSS Hole?&quot;</h2>

<p>By not fixing an XSS hole this could allow possible user account compromise in portions of your site as they get added or updated. Cross Site Scripting has been found in various large sites recently and have been widely publicized. Left unrepaired, someone may discover it and publish a warning about your company. This may damage your company's reputation, depicting it as being lax on security matters. This of course also sends the message to your clients that you aren't dealing with every problem that arises, which turns into a trust issue. If your client doesn't trust you why would they wish to do business with you?</p>]]></DetailedInformation>
  <Recommendation><![CDATA[Your script should filter metacharacters from user input.]]></Recommendation>
  <TechnicalDetails>
    <Request><![CDATA[GET /hpp/params.php?p=1'%22()%26%25&lt;ScRiPt%20&gt;prompt(951846)&lt;/ScRiPt&gt;&amp;pp=1 HTTP/1.1
Referer: http://testphp.vulnweb.com:80/
Host: testphp.vulnweb.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36
Accept: */*

]]></Request>
    <Response><![CDATA[HTTP/1.1 200 OK
Server: nginx/1.4.1
Date: Tue, 07 Oct 2014 17:30:28 GMT
Content-Type: text/html
Connection: keep-alive
X-Powered-By: PHP/5.3.10-1~lucid+2uwsgi2
Original-Content-Encoding: gzip
Content-Length: 40
]]></Response>
  </TechnicalDetails>
  <CWE id="79"><![CDATA[CWE-79]]></CWE>
  <CVEList/>
  <CVSS>
    <Descriptor><![CDATA[AV:N/AC:M/Au:N/C:N/I:P/A:N]]></Descriptor>
    <Score><![CDATA[4.4]]></Score>
    <AV><![CDATA[Network]]></AV>
    <AVdesc><![CDATA[A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access.]]></AVdesc>
    <AC><![CDATA[Medium]]></AC>
    <ACdesc><![CDATA[The access conditions are somewhat specialized.]]></ACdesc>
    <Au><![CDATA[None]]></Au>
    <Audesc><![CDATA[Authentication is not required to exploit the vulnerability.]]></Audesc>
    <C><![CDATA[None]]></C>
    <Cdesc><![CDATA[There is no impact to the confidentiality of the system.]]></Cdesc>
    <I><![CDATA[Partial]]></I>
    <Idesc><![CDATA[Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited.]]></Idesc>
    <A><![CDATA[None]]></A>
    <Adesc><![CDATA[There is no impact to the availability of the system.]]></Adesc>
    <E><![CDATA[]]></E>
    <Edesc><![CDATA[]]></Edesc>
    <RL><![CDATA[]]></RL>
    <RLdesc><![CDATA[]]></RLdesc>
    <RC><![CDATA[]]></RC>
    <RCdesc><![CDATA[]]></RCdesc>
  </CVSS>
  <References>
    <Reference>
      <Database><![CDATA[Acunetix Cross Site Scripting Attack]]></Database>
      <URL><![CDATA[http://www.acunetix.com/websitesecurity/cross-site-scripting.htm]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[VIDEO: How Cross-Site Scripting (XSS) Works]]></Database>
      <URL><![CDATA[http://www.acunetix.com/blog/web-security-zone/video-how-cross-site-scripting-xss-works/]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[The Cross Site Scripting Faq]]></Database>
      <URL><![CDATA[http://www.cgisecurity.com/xss-faq.html]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[OWASP Cross Site Scripting]]></Database>
      <URL><![CDATA[http://www.owasp.org/index.php/Cross_Site_Scripting]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[XSS Annihilation]]></Database>
      <URL><![CDATA[http://ha.ckers.org/blog/20060602/xss-annihilation/]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[XSS Filter Evasion Cheat Sheet]]></Database>
      <URL><![CDATA[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[Cross site scripting]]></Database>
      <URL><![CDATA[http://en.wikipedia.org/wiki/Cross-site_scripting ]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[OWASP PHP Top 5]]></Database>
      <URL><![CDATA[http://www.owasp.org/index.php/PHP_Top_5]]></URL>
    </Reference>
    <Reference>
      <Database><![CDATA[How To: Prevent Cross-Site Scripting in ASP.NET]]></Database>
      <URL><![CDATA[http://msdn.microsoft.com/en-us/library/ms998274.aspx]]></URL>
    </Reference>
  </References>
</ReportItem>
