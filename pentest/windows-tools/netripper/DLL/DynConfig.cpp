
#include "stdafx.h"
#include "DynConfig.h"

// Hardcoded settings: will be replaced by NetRipper

char NETRIPPER_SETTINGS[] = 
	"<NetRipper>"
	"<plaintext>"
	"true????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</plaintext>"

	"<datalimit>"
	"4096????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</datalimit>"

	"<stringfinder>"
	"user,login,pass,database,config?????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</stringfinder>"

	"<data_path>"
	"TEMP????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"????????????????????????????????????????????????????????????????"
	"</data_path>"
	"</NetRipper>";

// Class data

string DynConfig::s_sDataPath     = "TEMP";
string DynConfig::s_sPlainText    = "true";
string DynConfig::s_sDataLimit    = "4096";
string DynConfig::s_sStringFinder = "user,login,pass,database,config";

// Read and parse configuration data

void DynConfig::Init()
{
	s_sDataPath     = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<data_path>", "</data_path>"));
	s_sPlainText    = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<plaintext>", "</plaintext>"));
	s_sDataLimit    = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<datalimit>", "</datalimit>"));
	s_sStringFinder = Filter(Utils::GetStringBetween(NETRIPPER_SETTINGS, "<stringfinder>", "</stringfinder>"));
}

// Filters the ? and " " chars

string DynConfig::Filter(string p_sString)
{
	string sResult = "";

	for(size_t i = 0; i < p_sString.length(); i++)
	{
		if(p_sString[i] == '?') break;
		if(p_sString[i] == ' ') continue;

		sResult += p_sString[i];
	}

	return sResult;
}

// Get plaintext plugin config

string DynConfig::GetPlainText()
{
	return s_sPlainText;
}

// Get datalimit plugin config

string DynConfig::GetDataLimit()
{
	return s_sDataLimit;
}

// Get stringfinder plugin config

string DynConfig::GetStringFinder()
{
	return s_sStringFinder;
}

// Get the data path, create folder if it does not exists

string DynConfig::GetDataPath()
{
	char buffer[MAX_TEMP_PATH] = {0};
	string sPath = "";

	// If it is default configured to use TEMP

	if(s_sDataPath.compare("TEMP") == 0)
	{
		// Get Temp path

		if(GetTempPath(MAX_TEMP_PATH, buffer) == 0)
		{
			DebugLog::DebugError("[ERROR] Cannot get temporary path to save data!");
			return "";
		}

		sPath = buffer;
		sPath = sPath + "NetRipper";
	}
	else sPath = s_sDataPath;

	// Create DIRECTORY if does not exist

	if(CreateDirectory(sPath.c_str(), NULL) == 0)
	{
		if(GetLastError() != ERROR_ALREADY_EXISTS)
		{
			DebugLog::DebugError("[ERROR] Cannot create NetRipper directory to save data!");
			return "";
		}
	}

	sPath = sPath + "\\";

	return sPath;
}
