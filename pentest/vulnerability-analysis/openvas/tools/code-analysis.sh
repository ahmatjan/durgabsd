#!/bin/sh

# OpenVAS
# $Id$
# Description: Script for analysing the code quality over time.
#
# Authors:
# Jan-Oliver Wagner <jan-oliver.wagner@intevation.de>
# Tim Brown <timb@openvas.org>
#
# Copyright:
# Copyright (C) 2008 Intevation GmbH
# Copyright (C) 2009 Tim Brown
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2,
# as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# 2009-12-09  Tim Brown <timb@openvas.org>
#
#	* Added support for cppcheck.
#	* Added verbose mode to display flawfinder and cppcheck output.
#	* Noted openvas-server and openvas-libnasl are deprecated modules.
#	* Added openvas-manager, openvas-administrator and gsa modules.
#	* No longer terminates if no releases selected, to give trunk a chance.
#	* Optimised flawfinder checks. 
#

TMPDIR=/tmp/openvas-code-qa
rm -rf $TMPDIR
mkdir -p $TMPDIR

# uncomment the tests you want to run:

FLAWFINDER=yes
CPPCHECK=yes
GCCWALL=no

# set this to "yes" if you want to test trunk as well

TESTTRUNK=yes

# set this to "yes" for verbose reporting

VERBOSE=yes

# uncomment one of these pairs to analyse a module:

# note this module is deprecated, see openvas-scanner
#MODULE=openvas-server
#RELEASES="0.9.0 0.9.1 0.9.2"

#MODULE=openvas-libraries
#RELEASES="0.9.0 0.9.1 1.0.0"

# note this module is deprecated, see openvas-libraries
#MODULE=openvas-libnasl
#RELEASES="0.9.0" "0.9.1" "0.9.2" "1.0.0"

# note these take a long time because if the many .nasl files
#MODULE=openvas-plugins
#RELEASES="0.9.1"

#MODULE=openvas-client
#RELEASES="0.9.1 1.0.0 1.0.1 1.0.2"

#MODULE=openvas-manager
#RELEASES=""

#MODULE=openvas-administrator
#RELEASES=""

#MODULE=gsa
#RELEASES=""

if [ -z "$MODULE" ] ; then echo "Error: You need to uncomment a module name" ; exit ; fi
if [ -z "$RELEASES" ] ; then echo "Warning: Skipping releases" ; fi

echo "Analysis of $MODULE:"
for release in $RELEASES ; do
  echo "Retrieving code of release $release ..."
  svn export -q https://svn.wald.intevation.org/svn/openvas/tags/$MODULE-release-$release/ $TMPDIR/$MODULE-release-$release
  echo "$MODULE $release:"
  if [ $FLAWFINDER = "yes" ] ; then
    flawfinder $TMPDIR/$MODULE-release-$release > $TMPDIR/$MODULE-release-$release.flawfinder.$$ 2> /dev/null
    grep "(SLOC)" $TMPDIR/$MODULE-release-$release.flawfinder.$$
    grep "Hits" $TMPDIR/$MODULE-release-$release.flawfinder.$$
    [ $VERBOSE = "yes" ] && cat $TMPDIR/$MODULE-release-$release.flawfinder.$$
    rm $TMPDIR/$MODULE-release-$release.flawfinder.$$
  fi
  if [ $CPPCHECK = "yes" ] ; then
    cppcheck -q -f -a $TMPDIR/$MODULE-release-$release > $TMPDIR/$MODULE-release-$release.cppcheck.$$ 2>&1
    echo "cppcheck error counting..."
    grep "(error)" $TMPDIR/$MODULE-release-$release.cppcheck.$$ 2>&1 | wc -l
    echo "cppcheck possible error counting.."
    grep "(possible error)" $TMPDIR/$MODULE-release-$release.cppcheck.$$ 2>&1 | wc -l
    [ $VERBOSE = "yes" ] && cat $TMPDIR/$MODULE-release-$release.cppcheck.$$
    rm $TMPDIR/$MODULE-release-$release.cppcheck.$$
  fi
  if [ $GCCWALL = "yes" ] ; then
    echo "gcc -Wall counting ...";
    ( cd $TMPDIR/$MODULE-release-$release ; CFLAGS=-Wall ./configure > stub 2>&1 && CFLAGS=-Wall make > log 2>&1 && grep "warning:" log  | wc -l )
  fi
done

if [ $TESTTRUNK = "yes" ] ; then
  svn export -q https://svn.wald.intevation.org/svn/openvas/trunk/$MODULE $TMPDIR/$MODULE-trunk ;
  echo "$MODULE trunk:" ;
  if [ $FLAWFINDER = "yes" ] ; then
    flawfinder $TMPDIR/$MODULE-trunk > $TMPDIR/$MODULE-trunk.flawfinder.$$ 2> /dev/null
    grep "(SLOC)" $TMPDIR/$MODULE-trunk.flawfinder.$$
    grep "Hits" $TMPDIR/$MODULE-trunk.flawfinder.$$
    [ $VERBOSE = "yes" ] && cat $TMPDIR/$MODULE-trunk.flawfinder.$$
    rm $TMPDIR/$MODULE-trunk.flawfinder.$$
  fi
  if [ $CPPCHECK = "yes" ] ; then
    cppcheck -q -f -a $TMPDIR/$MODULE-trunk > $TMPDIR/$MODULE-trunk.cppcheck.$$ 2>&1
    echo "cppcheck error counting..."
    grep "(error)" $TMPDIR/$MODULE-trunk.cppcheck.$$ 2>&1 | wc -l
    echo "cppcheck possible error counting.."
    grep "(possible error)" $TMPDIR/$MODULE-trunk.cppcheck.$$ 2>&1 | wc -l
    [ $VERBOSE = "yes" ] && cat $TMPDIR/$MODULE-trunk.cppcheck.$$
    rm $TMPDIR/$MODULE-trunk.cppcheck.$$
  fi
  if [ $GCCWALL = "yes" ] ; then
    echo "gcc -Wall counting ...";
    ( cd $TMPDIR/$MODULE-trunk ; CFLAGS=-Wall ./configure > stub 2>&1 && CFLAGS=-Wall make > log 2>&1 && grep "warning:" log  | wc -l )
  fi
fi
