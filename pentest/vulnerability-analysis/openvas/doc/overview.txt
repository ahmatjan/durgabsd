Introduction
---------------------------

OpenVAS stands for Open Vulnerability Assessment System and is a network
security scanner.  It consists of a scanner component and a set of plugins
to test various vulnerabilities in remote systems and applications.
Various clients connect to the scanner, authenticate and if authorized, may
initiate a vulnerability scan against [a] specified host[s]

It is a fork of the Nessus Scanner.

Currently, the OpenVAS is hosted by Intevation (http://www.intevation.de)
in Germany.


License
---------------------------

OpenVAS is Free Software under the GNU GPL.


OpenVAS Scanner (openvassd)
---------------------------

Currently, openvassd is being modified to use GNUTLS instead of the
currently-in-place OpenSSL.  This is due to the lack of an OpenSSL license
exception for OpenVAS.  openvassd accepts connections from a client.  The
connection may be in clear text or over SSL/TLS.  The choice depends on
factors such as:

 * Does the client support SSL/TLS
 * Is the scanner compiled with SSL support?
 * What does the user prefer...(SSLv3, TLS1...)

If the provided set of authentication tokens (key based or password based)
are accepted, The client, then loads a list of Assessment scans available.
The list is derived from the plugins installed (openvas-plugins).


OpenVAS plugins
---------------------------

Plugins are typically written in NASL.  Typically, there's a 1-1
relationship between a plugin and a vulnerability.  The detachment of
plugins[Vulnerability list] from the scanner itself enables plugin
development to be decoupled from the scanning engine development.  Thus we
can have plugins released and updated daily in a similar fashion to the
Debian apt tool.

A typical plugin has
 * A description of what the plugin does
 * The script code conducting the actual test.

An example script that checks for a Windows pcAnywhere service.

if(description)
{
 script_id(10006);
 script_version ("$Revision: 38 $");
 name["english"] = "pcAnywhere";
 script_name(english:name["english"]);


 desc["english"] = "
pcAnywhere is running on this port.

Solution : Disable this service if you do not use it.
Risk factor : None";

 script_description(english:desc["english"]);

 summary["english"] = "Checks for the presence pcAnywhere";
 script_summary(english:summary["english"]);


 script_category(ACT_GATHER_INFO);
 script_copyright(english:"This script is Copyright (C) 1999 Mathieu Perrin");

 family["english"] = "Windows";
 script_family(english:family["english"]);
 script_dependencie("find_service.nes");


exit(0);
}


#
# The script code starts here
#

port = 5632;
if (!get_port_state(port))
  exit (0);

soc = open_sock_udp(port);
if (!soc) exit(0);

send (socket:soc, data:"ST");
buf = recv(socket:soc, length:2);
if ("ST" >< buf)
  security_note (port);


The actual grunt work starts at 'if (!get_port_state(port))'.  This
involves
 * Testing whether the port is open
 * Opening a UDP connection
 * Sending an init string
 * Watching out for the correct response
 * Notify/Flagging the result as necessary.

Now write a simple nasl script to check for telnet availability.  Compare
your results with
'openvas-plugins/scripts/telnetserver_detect_type_nd_version.nasl'

You may use the openvas-nasl tool to verify it's syntax as well as execute
it.  A typical example is
$ sudo openvas-nasl telnetserver_detect_type_nd_version.nasl -t localhost -X

A pcap tool such as wireshark can be used while debugging your script

At startup, openvassd loads (?and compiles?) all the nasl scripts specified
in it's config file.  The scripts are categorized into various groups
(?Prescan, Postscan, Safechecks etc...?).  Depending on the category, and
user settings, openvassd will load a [sub]set of the plugin scripts for
checks.  For example:
Prescan : Check whether host is up
Scan:  Check whether plugin is safe vs user setting; Run the script if all's ok
???
