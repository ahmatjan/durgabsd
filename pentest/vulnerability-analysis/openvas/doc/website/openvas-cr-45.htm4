m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: OpenVAS Change Request #45
m4_dnl
m4_dnl Authors:
m4_dnl Matthew Mundell <matthew.mundell@intevation.de>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2010 Greenbone Networks GmbH
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or
m4_dnl modify it under the terms of the GNU General Public License
m4_dnl as published by the Free Software Foundation; either version 2
m4_dnl of the License, or (at your option) any later version.
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #45: OpenVAS-Scanner: add pausing of scans</h2>

Status: Voted +7.  Done (completed with SVN revision 7236).

<h3>Purpose</h3>

<p>
Add "soft" pausing to the Scanner, which allows a client to pause a running
scan.
</p>

<h3>References</h3>

<ul>
 <li><a href="http://lists.wald.intevation.org/pipermail/openvas-devel/2010-March/002048.html">Patch</a> sent to openvas-devel mailing list</li>
</ul>

<h3>Rationale</h3>

<p>
A planned feature of the Manager is scheduling of tasks.  Scheduling would
allow the user to run a task during a certain time period, for example for
three hours every night.
</p>

<p>
To implement this type of task scheduling the Manager needs to be able to
pause the scan at the end of the time period.
</p>

<p>
This CR proposes to add "soft" pausing to the Scanner.
</p>

<p>
In response to a pause command the Scanner will stop scheduling new NVTs
until it receives a resume command.  Any scheduled or running NVTs will
continue to completion.
</p>

<p>
As a consequence of this design, stopping the entire Scanner will stop the
paused scan, as if the client had sent a STOP_WHOLE_TEST.  This is simpler,
and easier to implement, than trying to store scan state across invocations
of the Scanner.
</p>

<h3>Effects</h3>

<p>
OTP gains two new commands, PAUSE_WHOLE_TEST and RESUME_WHOLE_TEST.
</p>

<p>
The OTP STATUS message gains two new actions, "pause" and "resume".
</p>

<h3>Design and Implementation</h3>

<p>
Please see the mailing list
<a href="http://lists.wald.intevation.org/pipermail/openvas-devel/2010-March/002048.html">patch</a>
for the proposed implementation.
</p>

<p>
The patch makes the process controlling the scan send a USR1 signal to
the host processes when it receives a PAUSE_WHOLE_TEST from the client.  The
signal handlers in the host processes set a variable which causes the NVT
launching loops in these processes to idle.
</p>

<p>
Similarly, the patch makes the process controlling the scan send a USR2
signal to the host processes when it receives a RESUME_WHOLE_TEST from the
client.  The signal handlers clear the variable and the host processes
continue launching NVTs.
</p>

<p>
Each host process sends a STATUS message with action "pause" or "resume" when
pausing or resuming.
</p>

<p>
Here's the ChangeLog from the proposed patch.
</p>

<pre>
2010-03-11  Matthew Mundell <matthew.mundell@intevation.de>

    Add soft pausing of scans.  Implementation of Change Request #45:
    OpenVAS-Scanner: add pausing of scans,
    http://www.openvas.org/openvas-cr-44.html.

    * openvassd/otp_1_0.h (client_request_t): Add CREQ_PAUSE_WHOLE_TEST and
    CREQ_RESUME_WHOLE_TEST.

    * openvassd/otp_1_0.c (otp_1_0_get_client_request): Add PAUSE_WHOLE_TEST
    and RESUME_WHOLE_TEST commands.

    * openvassd/ntp_11.h (NTP_PAUSE_WHOLE_TEST, NTP_RESUME_WHOLE_TEST): New
    defines.

    * openvassd/ntp_11.c (ntp_11_parse_input): Add CREQ_PAUSE_WHOLE_TEST and
    CREQ_RESUME_WHOLE_TEST handling.

    * openvassd/attack.c (pause_whole_test): New variable.
    (attack_handle_sigusr1, attack_handle_sigusr2): New functions.  Set and
    clear pause_whole_test.
    (attack_host): Check pause_whole_test between plugins and pause if set.
    (attack_start): Set attack_handle_sigusr1 and attack_handle_sigusr2 as
    SIGUSR1 and SIGUSR2 handlers.

    * openvassd/hosts.c (hosts_pause_all, hosts_resume_all): New functions.
    Send pause and resume signal to host process.
    (hosts_read_client): Pause or resume if client gave associated command.

    * openvassd/hosts.h: Add headers accordingly.
</pre>

<h3>History</h3>

<ul>
<li> 2010-05-06 Matthew Mundell &lt;matthew.mundell@greenbone.de&gt;:<br>
     Marked as done.</li>
<li> 2010-03-11 Matthew Mundell &lt;matthew.mundell@intevation.de&gt;:<br>
     Initial text.</li>
</ul>
