m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: OpenVAS Change Request #47
m4_dnl
m4_dnl Authors:
m4_dnl Michael Wiegand <michael.wiegand@intevation.de>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2010 Greenbone Networks GmbH
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or
m4_dnl modify it under the terms of the GNU General Public License
m4_dnl as published by the Free Software Foundation; either version 2
m4_dnl of the License, or (at your option) any later version.
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #47: OpenVAS-Scanner: Keep uploaded files in memory
instead of on disk</h2>

<p>
Status: Voted +5. Done. Implemented with SVN revisions 7635 and 7638.
</p>

<h3>Purpose</h3>

<p>
To eliminate possible TOCTOU attacks on the scanner.
</p>

<p>
To allow privilege downgrades in the scanner.
</p>

<h3>References</h3>

<ul>

<li><a
href="http://lists.wald.intevation.org/pipermail/openvas-devel/2009-October/001863.html">Post
by Tim Brown describing the TOCTOU attack</a>
<li><a href="http://osvdb.org/show/osvdb/58972">OSVDB entry for the TOCTOU
attack</a>

</ul>

<h3>Rationale</h3>

<p>
Currently, files uploaded to the OpenVAS scanner through NVT preferences of the
type <i>file</i> are written to temporary files when they are uploaded at the
start of a scan. A mapping is created between the original name of the file
on the users machine (e.g. <i>/home/user/abc.txt</i>) and the name of the
temporary file on the OpenVAS scanner (e.g.
<i>/var/lib/openvas/tmp/tmp.12345-678</i>). When the NVT which uploaded the file
runs during the attack, the location or content of this temporary file will be
provided to NVT. When the task has finished, the temporary files are removed.
</p>

<p>
NVTs can access the uploaded file in two ways: they can use the command
<i>script_get_preference_file_content</i> to access the contents of the file or
the command <i>script_get_preference_file_location</i> to determine to location
of the temporary file on the OpenVAS scanner.
</p>

<p>
One weakness of this approach is that it opens the possibility of TOCTOU
(time of check, time of use) race conditions: a local attacker could use the
insecure creation of the temporary file to overwrite arbitrary files (as
described by Tim Brown <a
href="http://lists.wald.intevation.org/pipermail/openvas-devel/2009-October/001863.html">here</a>
and <a href="http://osvdb.org/show/osvdb/58972">here</a>) or could alter the contents of
the uploaded file between upload and actual use by the NVT.
</p>

<p>
The file system access currently happens at a time where the process has
elevated privileges and has access to the entire disk; this amplifies the threat
described above.  In order to have the OpenVAS scanner operating in a secure
manner, the OpenVAS project is committed to enabling the scanner to run with the
least privileges possible; this may mean that writing to disk or accessing files
on disk might not be possible for the process in the future.
</p>

<h3>Suggested Changes</h3>

<p>
To avoid any need for disk access or elevated privileges, this change request
proposes the storage of uploaded files in memory instead of on disk.
</p>

<p>
The least invasive way to switch to memory based storage would be to use the
mapping described above to map the original file name to the actual contents of
the file instead of the file name on the scanner (see below).
</p>

<h3>Effects</h3>

<p>
The scanner would no longer write uploaded files to disk, thereby reducing
potential attack vectors and removing the need for disk access in this context.
</p>

<p>
Depending on the size of the uploaded files, memory usage of openvas-scanner
would increase during a scan.
</p>

<h3>Design and Implementation</h3>

<p>
The least invasive approach would require a few minor changes to openvas-scanner
and openvas-libraries:
</p>

<ul>

<li>In openvas-scanner/openvasd/ntp_11.c (<i>ntp_11_recv_file</i>): Currently,
the uploaded file is written to a temporary file and the name of the temporary
file is kept in memory. This should be changed to storing the contents of the
file in memory instead of the name of the temporary file.

<li>In openvas-libraries/nasl/nasl_scanner_glue.c
(<i>script_get_preference_file_content</i>): This function currently opens the
temporary file and provides its content to the NVT. This should be changed to
retrieve the content from memory instead of from the file.

<li>In openvas-libraries/misc/plugutils.c (<i>get_plugin_preference_fname</i>):
This function currently provides the mapping from the original name of the file
to the name of the temporary file, but would after the change provided the
mapping from the name of the uploaded file to its contents. The function name
should be changed to reflect this change.

<li>In openvas-scanner/openvassd/attack.c (<i>unlink_name_mapped_file</i>): This
callback currently removes the temporary files from disk after a scan has
finished. This should be changed to free the memory used by the uploaded file
instead.

</ul>

<p>
This change would require additional changes to update the handling of ssh login
information uploaded by the client in openvas-scanner:
</p>

<ul>

<li>In openvas-scanner/openvassd/ntp_11.c
(<i>build_global_host_sshlogins_map</i>): This function currently uses the
<i>hash_table_file_read</i> function provided by
openvas-libraries/misc/hash_table_file.c to read a file into a hash table. It
should be changed to use the <i>hash_table_file_read_text</i> function provided
by the same file to read the contents from memory instead.

<li>In openvas-scanner/openvassd/ntp_11.c
(<i>build_global_sshlogin_info_map</i>): This function currently uses the
<i>openvas_ssh_login_file_read</i> function provided by
openvas-libraries/misc/openvas_ssh_login.c to read a file into a hash table.
This file currently does not provide a function to read the contents from memory
into the hash table, so this would require an additional change:

<li>In openvas-libraries/misc/openvas_ssh_login.c: A function should be added to
allow importing a key file from memory instead of from disk; this can be easily
done by using <i>g_key_file_load_from_data</i> instead of
<i>g_key_file_load_from_file</i>.

</ul>


<h3>History</h3>

<ul>
<li> 2010-05-13 Michael Wiegand &lt;michael.wiegand@greenbone.net&gt;:<br>
     Updated status, removed paragraph with outdated information.
<li> 2010-05-03 Michael Wiegand &lt;michael.wiegand@greenbone.net&gt;:<br>
     Updated status.</li>
<li> 2010-03-26 Michael Wiegand &lt;michael.wiegand@intevation.de&gt;:<br>
     Initial text.</li>
</ul>
