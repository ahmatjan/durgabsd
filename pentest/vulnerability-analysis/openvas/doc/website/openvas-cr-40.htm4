m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: OpenVAS Change Request #40
m4_dnl
m4_dnl Authors:
m4_dnl Thomas Reinke <reinke@securityspace.com>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2009 E-Soft Inc.
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or modify
m4_dnl it under the terms of the GNU General Public License version 2,
m4_dnl or, at your option, any later version as published by the Free
m4_dnl Software Foundation
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #40: find_service.c and NMAP service detection</h2>

<p>
Status: Voted +4. Done.
</p>

<h3>Purpose</h3>

<p>
To consider replacing "C" plugin find_service.c with a NASL equivalent,
and to make use of the nmap's service detection capabilities.
</p>

<h3>References</h3>

<p>
</p>

<h3>Rationale</h3>

<p>
Currently, service detection is accomplished by "C"
plugin find_service.c, and is supplemented with
additional service detection plugins find_service1.nasl,
find_service2.nasl and find_service_3digits.nasl

<p>
It is a general goal to avoid, and if possible, to replace
existing "C" plugins as they cannot be updated except
during updates of the actual daemon.

<p>
It is also a general objective to avoid duplication of
effort where possible.  nmap currently has, as of the
5.00 release, the ability to recognize 511 different services.
This capability is currently completely unused in OpenVAS.
</p>

<h3>Effects</h3>

<p>
Two possible solutions exist.
</p>
<p>
<ol>
<li>Completely replace find_service.c with nmap/NASL based
equivalents.
<li>Freeze existing find_service.c development, and complement
its capabilities with nasl based detection, along with a NASL
wrapper for nmap service detection.
</ol>
</p>

<p>
The downside of complete replacement of find_service.c is
that it involves a non-trivial effort in order to replace
and verify that the signatures currently detected by it
would be correctly handled with a replacement mechanism
such as nmap.  Issues include naming difference in services
(e.g. "irc-proxy (nmap), psybnc - find_service.c) and potentially
incomplete signatures (nmap fails to identify this author's
POP3 server, instead identifying it only because it resides
on a standard port), while find_service.c correctly identifies it).
</p>

<p>
An approach of freezing find_service.c, and implementing
nmap service detection in a separate wrapper would support
the goal of leveraging nmap's service detection, and would
support updates between releases via nasl.  It would also
minimize potentially misidentified well known services,
as mentioned in the previous paragraph.
</p>

</p>

<h3>Design and Implementation</h3>

<p>
The implementation needs to establish the following changes:
</p>

<ul>
<li> Create a new NASL wrapper for nmap service detection (perhaps
     called find_service_nmap.nasl). Specific
     pitfalls include avoid forking (eg calls to get_kb_item to avoid
     situations where hundreds/thousands of unknown services might exist), and
     update the knowledge base as services are identified in order to
     avoid losing all identifications done should the script be aborted
     early.
<li> Have the new script be dependent upon existing find_service* scripts
     such that it will only check services not yet identified by
     the time it runs.  This will also minimize the chance of services
     being registered with different names than expected elsewhere.
<li> Change existing dependencies on find_service.nes to be dependent
     on find_service_nmap.nasl instead. <B>Update:</B>Not necessary.
     Only needs to be done for any scripts in the future that make use
     of services not already succesfully detected by legacy service
     detection scripts. (But won't be harmful if it is changed, either.)
<li> Promote reporting incomplete signature detection back to nmap
     (or to OpenVAS?) through appropriate security_notes() in the
     generated reports. <b>Update:</b>Deferred to avoid cluttering reports.
<li> ? Should OpenVAS distribute its own version of the signature file
     with the feed? <b>Update:</b> Also deferred.  May be added by adding
     "--datadir <dirname>" to the nmap parameter list once it is known we
     will distribute and maintain an up to date nmap signature list.
</ul>

<h3>History</h3>

<ul>
<li> 2009-11-18 Thomas Reinke &lt;reinke@securityspace.com&gt;:<br>
     Marked completed. Updated design/implementation notes.
<li> 2009-09-09 Michael Wiegand &lt;michael.wiegand@intevation.de&gt;:<br>
     Updated status with voting results.</li>
<li> 2009-08-07 Thomas Reinke &lt;reinke@securityspace.com&gt;:<br>
     Initial text.</li>
</ul>
