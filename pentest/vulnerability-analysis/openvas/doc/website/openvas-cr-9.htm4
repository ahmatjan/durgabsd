m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: OpenVAS Change Request #9
m4_dnl
m4_dnl Authors:
m4_dnl Jan-Oliver Wagner <jan-oliver.wagner@intevation.de>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2008 Intevation GmbH
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or
m4_dnl modify it under the terms of the GNU General Public License
m4_dnl as published by the Free Software Foundation; either version 2
m4_dnl of the License, or (at your option) any later version.
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #9: Make OpenVAS use (and depend on) glib</h2>

Status: Voted +2. Done. Increasing use of glib and dependency since release of 2.0 series.

<h3>Purpose</h3>

<p>
To reduce code base of OpenVAS by using storage, command line parsing and several
other functionalities of glib instead and thus share the effort to maintain and optimize
base functionalities among a broader developer/user base.
</p>

<h3>References</h3>

<p>
<a href="http://lists.wald.intevation.org/pipermail/openvas-discuss/2008-April/000553.html">Initial discussion on openvas-discuss mailing list where this request emerged from</a>.
</p>

<h3>Rationale</h3>

<p>
OpenVAS includes several code elements that are either copies from third parties (e.g. getopt)
or self-implemented solutions that re-implement already available solutions (e.g. arglist concept).
Probably both was done with portability in mind. The latter perhaps aimed at having
performance screws better under control. However, these decisions were done many years
ago in the Nessus times.
</p>

<p>
As for the portability issues, it is indeed a problem that libc implementations
do differ in details and would cause alternative code paths in OpenVAS.
A advantage of glib is that there exists only a single implementation that
aims to run on many different platforms, even including Windows.
Thus, using the glib API will not lead to alternative code paths to
maintain several platforms.
</p>

<p>
It is usually not recommended to link large libraries into a security
relevant program, because security problems of the library might be inherited as well.
However, a broadly used library with many users, high expectations
and an active developer community might offer better quality
than a re-invented code under own control but which receives
only little review. It is out of scope for OpenVAS to develop
criteria that enable to balance out advantages and disadvantages
of this design decision in general.
</p>

<p>
The main issue to solve with glib is to use its functionality to
replace all "arglist" based storage handling of OpenVAS in order
to gain a better performance and less OpenVAS source code.
Other gains could be to replace any "getopt" by the respective
API of glib for command line parsing and other functionalities offered
by the glib API.
</p>


<h3>Effects</h3>

<ul>
<li> OpenVAS Server would require glib to run.

<li> The more functionality is moved over to glib the more complicated
     it will be to migrate to other APIs as glib does not implement
     any standard. In the case it should eventually be decided to
     not link against the upstream glib anymore (e.g. it gets abandoned or
     badly maintained), then it would be necessary
     to maintain a copy of glib with only the relevant features
     inside OpenVAS. At least until it might be decided to migrate to other API(s).
</ul>

<h3>Design and Implementation</h3>

<p>
This is not worked out in great detail yet, as it is partly still
to be evaluated which elements of glib are to be used in which way.
</p>

<p>
Basically, the idea is to have a initial step that creates the
dependency to glib and delivers a first helpful feature easy
to implement. Command line parsing appears to be this feature.
</p>

<ul>
<li> Adapt the configure and make process for openvas-libnasl and
     openvas-server to consider glib.

<li> Migrate the command line parsing from getopt to glib.
     See <a href="http://library.gnome.org/devel/glib/stable/glib-Commandline-option-parser.html">glib
     API for command line parsing</a>.

<li> Remove any occurrence and handling of the getopt copies.

<li> Evaluate whether the <a href="http://library.gnome.org/devel/glib/stable/glib-Random-Numbers.html">
     random number API</a> of glib should
     replace the module "rand" in openvas-libraries and other uses of random numbers.

<li> Evaluate where the <a href="http://library.gnome.org/devel/glib/stable/glib-Lexical-Scanner.html">
     lexical scanner</a> of glib could replace code. Not meant is the NASL interpreter here but several
     parsing tasks of the protocol and complex parameters.

<li> Evaluate which of the <a href="http://library.gnome.org/devel/glib/stable/glib-data-types.html">
     GLib Data Types</a> to be used to replacing arglist and other data management.
</ul>

<h3>History</h3>

<ul>
<li> 2010-01-07 Felix Wolfsteller &lt;felix.wolfsteller@intevation.de&gt;:<br>
     Updated status as done.</li>
<li> 2008-10-21 Michael Wiegand &lt;michael.wiegand@intevation.de&gt;:<br>
     Updated status.</li>
<li> 2008-06-18 Jan-Oliver Wagner &lt;jan-oliver.wagner@intevation.de&gt;:<br>
     Added voting result.
<li> 2008-06-10 Michael Wiegand &lt;michael.wiegand@intevation.de&gt;:<br>
     Moved parts relating to OpenVAS-Client to <a href="http://www.openvas.org/openvas-cr-11.html">Change request #11</a>.</li>
<li> 2008-05-05 Jan-Oliver Wagner &lt;jan-oliver.wagner@intevation.de&gt;:<br>
     Initial text.</li>
</ul>
