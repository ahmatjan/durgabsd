m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: OpenVAS Change Request #30
m4_dnl
m4_dnl Authors:
m4_dnl Michael Wiegand <michael.wiegand@greenbone.net>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2009,2010 Greenbone Networks GmbH
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or
m4_dnl modify it under the terms of the GNU General Public License
m4_dnl as published by the Free Software Foundation; either version 2
m4_dnl of the License, or (at your option) any later version.
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #30: OpenVAS Administration Protocol (OAP)</h2>

<p>
Status: Voted +6. Released with openvas-administrator 1.0.0.
</p>

<p>
For the final specification of OAP please refer to this page:
<a href="protocol-doc.html">Protocol Documentation</a>.
</p>

<h3>Purpose</h3>

<p>
To introduce a new protocol which allows a client to control the settings of
an OpenVAS server.
</p>

<h3>References</h3>

<p>
(none)
</p>

<h3>Rationale</h3>

<p>
Configuration of an OpenVAS server currently requires the human server administrator
to access the server through a shell and execute shell scripts or modify
configuration files manually. This can lead to server misconfiguration if not
done carefully and might not be possible or desired under certain circumstances.
</p>

<p>
As a basis for an application intended to address this issue, this change
request propose a network protocol to be used for communicating OpenVAS
configuration data.
</p>

<p>
The design goals for this new protocol should be:
</p>

<ul>
  <li>
    Allow for easy and fast parsing of the protocol while retaining
    human-readability for debugging and development purposes.
  </li>
  <li>
    Make the protocol as stateless as possible to avoid unnecessary delays in
    the communication process.
  </li>
  <li>
    Allow for easy integration into other protocols and communication channels.
  </li>
</ul>

<p>
This change request proposes an XML based approach to satisfy the goals
described above. A first draft of the proposed protocol is available
in the section "Design and Implementation" of this Change Request.
</p>

<p>
This protocol is intended to be very similar to the OpenVAS Management Protocol
(OMP) to make use of existing functionality.
</p>

<h3>Effects</h3>

<p>
It will become possible to implement an application which automates and
simplifies the configuration of an OpenVAS server.
</p>


<h3>Design and Implementation</h3>

<h4>Design Considerations</h4>

<p>
The current specification proposes an XML based approach. This is intended to
allow for easy integration into other XML capable protocols and communication
methods, e.g. Web Services/SOAP, XmlHttpRequest, REST or other methods of
invoking remote functionality.
</p>

<p>
Human-readable strings are encoded as UTF-8.
</p>

<p>
The OAP communication between a client and the administrator takes a simple
command response form.  The client sends a command, a single XML element, to
the administrator.  The administrator responds with a single XML element.
</p>

<p>
There is a predefined set of OAP commands, each of which is described
<a href="#command_summary">below</a>.
</p>

<p>
Numerical response codes:<br>
The OpenVAS administrator uses numerical response codes to indicate
whether a command issued by the client could be executed successfully. The
response codes are similar to the response codes used by HTTP as specified in <a
href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a>; a response code in the
2xx range indicates that the command has been successfully received, understood,
and accepted. A response code in the 4xx range indicates that the command issued
could not be executed due to error made by the client. A response in the 5xx
range indicates that an error occurred in the administrator during the
processing of this command.<br>
Responses are expected to include helpful information whenever possible, like
the ID of the task when a command on this task was executed.<br>
Implementations which transfer OAP using a response-code aware protocol (e.g.
HTTP) might want to consider including this status code in the message generated
by this protocol.
</p>

<p>
Authentication:<br>
The client is expected to send an authentication element with each request.
Initially, this element will be expected to look like the following:
<pre>
&lt;authentication&gt;
  &lt;credentials&gt;
    &lt;username&gt;FooBar&lt;/username&gt;
    &lt;password&gt;276LkeFHJWnCaD6ynSlP6mnf9&lt;/password&gt;
  &lt;/credentials&gt;
&lt;/authentication&gt;
</pre>
Over time, other types of credentials are to be expected.
If the credentials supplied by the client are not sufficient, the administrator
must reply with:
<pre>
&lt;authentication_response status="400" status_text="Authentication failed" /&gt;
</pre>
and must not handle the actual request made by the client.
</p>

<h4 id="command_summary">Summary of Protocol Primitives / Commands</h4>

<table id="index">
<tr id="index">
  <td id="index"><a href="#authenticate">authenticate</a></td>
  <td id="index">Authenticate with the administrator.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#commands">commands</a></td>
  <td id="index">Execute a list of OAP commands.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#create_user">create_user</a></td>
  <td id="index">Create a new user.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#delete_user">delete_user</a></td>
  <td id="index">Delete an existing user.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#describe_auth">describe_auth</a></td>
  <td id="index">Get details about the used authentication methods.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#describe_feed">describe_feed</a></td>
  <td id="index">Get details of the NVT feed this administrator uses.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#get_settings">get_settings</a></td>
  <td id="index">Get scanner settings.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#get_users">get_users</a></td>
  <td id="index">Get all users.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#get_version">get_version</a></td>
  <td id="index">Get the OpenVAS Administrator Protocol version.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#help">help</a></td>
  <td id="index">Get the help text.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#modify_auth">modify_auth</a></td>
  <td id="index">Modify the authentication methods.</td>
</tr>
<tr id="index">
  <td id="index"><a href="#modify_user">modify_user</a></td>
  <td id="index">Modify a user</td>
</tr>
<tr id="index">
  <td id="index"><a href="#sync_feed">sync_feed</a></td>
  <td id="index">Synchronize with an NVT feed.</td>
</tr>
</table>

<h4>Details of Protocol Primitives / Commands</h4>

<h4 id="authenticate">authenticate</h4>

<p>
The client uses the authenticate command to authenticate with the administrator.
</p>

<p>
Command elements:
<ul>
  <li>
    &lt;credentials&gt;
    <ul>
      <li>&lt;username&gt; is the login name of the user.</li>
      <li>&lt;password&gt; is the user's password.</li>
    </ul>
  </li>
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;authenticate&gt;
  &lt;credentials&gt;
    &lt;username&gt;sally&lt;/username&gt;
    &lt;password&gt;secret&lt;/password&gt;
  &lt;/credentials&gt;
&lt;/authenticate&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;authenticate_response status="200" status_text="OK" /&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;authenticate_response status="400" status_text="Authenticate failed" /&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;authenticate_response status="500" status_text="Internal error" /&gt;
</pre>

<h4 id="commands">commands</h4>

<p>
The client uses the commands command to run a list of commands.  The elements
are executed as OAP commands in the given sequence.  The reply contains the
result of each command, in the same order as the given commands.
</p>

<p>
Command elements:
<ul>
  <li>Any OAP command.
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;commands&gt;
  &lt;delete_user name="foobar"/&gt;
  &lt;get_users/&gt;
&lt;/commands&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;commands_response status="200" status_text="OK"&gt;
  &lt;delete_user_response status="200" status_text="OK"/&gt;
  &lt;get_users_response status="200" status_text="OK"&gt;
    &lt;user&gt;
      &lt;name&gt;notfoobar&lt;/name&gt;
      &lt;role&gt;User&lt;/role&gt;
      &lt;hosts allow="2"&gt;&lt;/hosts&gt;
    &lt;/user&gt;
  &lt;/get_users_response&gt;
&lt;/commands_response&gt;
</pre>

<h4 id="create_user">create_user</h4>

<p>
The client uses the "create_user" command to create an user account on the
OpenVAS server. The client must supply an name for the user, a password to be
used for this user and a role that should be assigned to this user. It may
contain a hosts element describing the restrictions to be placed on the new
user. If the request does not contain a hosts element, the user account will be
unrestricted.
</p>

<p>
The status code in the administrator response will indicate whether or not the
requested action was successfully completed.
</p>

<p>
Command elements:
<ul>
  <li>name: The name of the user to be created.
  <li>password: An element containing the password for the new user.
  <li>role: An element containing the role for the new user.
  <li>hosts: An element containing the rules to be applied for the new user.
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;create_user&gt;
  &lt;name&gt;foobar&lt;/name&gt;
  &lt;password&gt;f00bar&lt;/password&gt;
  &lt;role&gt;User&lt;/role&gt;
&lt;/create_user&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;create_user_response status="201" status_text="OK, resource created"/&gt;
</pre>

<h4 id="delete_user">delete_user</h4>

<p>
The client uses the "delete_user" command to request the deletion of an user
account on the OpenVAS server. The client must supply the name of the user to be
deleted.
</p>

<p>
The status code in the administrator response will indicate whether the
deletion of the user with the supplied name was successful or not.
</p>

<p>
Command attributes:
<ul>
  <li>name: The name of the user to be deleted.
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;delete_user name="foobar"/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;delete_user_response status="200" status_text="OK"/&gt;
</pre>

<h4 id="describe_auth">describe_auth</h4>

<p>
The client uses the "describe_auth" command to get details about the used
authentication methods.
</p>

<p>
The administrator will reply with a list of all used authentication methods if
such a list is available.
</p>

<p>
Command elements:<br>
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;describe_auth/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;describe_auth_response status="200" status_text="OK"&gt;
  &lt;group name="Foo"&gt;
    &lt;auth_conf_setting key="Bar" value="Baz"/&gt;
  &lt;/group&gt;
&lt;/describe_auth_response&gt;
</pre>

<h4 id="describe_feed">describe_feed</h4>

<p>
The client uses the "describe_feed" command to get details about the NVT feed
used by the administrator.
</p>

<p>
The administrator will reply with a feed element containing information about
the NVT feed.
</p>

<p>
Command elements:<br>
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;describe_feed/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;describe_feed_response status="200" status_text="OK"&gt;
  &lt;feed&gt;
    &lt;name&gt;OpenVAS NVT Feed&lt;/name&gt;
    &lt;version&gt;201011221324&lt;/version&gt;
    &lt;description&gt;
      This script synchronizes an NVT collection with the &apos;OpenVAS NVT Feed&apos;.
      The &apos;OpenVAS NVT Feed&apos; is provided by &apos;The OpenVAS Project&apos;.
      Online information about this feed: &apos;http://www.openvas.org/openvas-nvt-feed.html&apos;.
    &lt;/description&gt;
  &lt;/feed&gt;
&lt;/describe_feed_response&gt;
</pre>

<h4 id="get_settings">get_settings</h4>

<p>
The client uses the "get_settings" command to retrieve a list of all settings
set for the OpenVAS server controlled by this OpenVAS administrator.
</p>

<p>
The administrator will reply with a list of all known settings and their values.
</p>

<p>
Command elements:<br>
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;get_settings/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;get_settings_response status="200" status_text="OK"&gt;
  &lt;scanner_settings sourcefile="/etc/openvas/openvassd.conf" editable="0"&gt;
    &lt;setting name="safe_checks"&gt;yes&lt;/setting&gt;
    ...
  &lt;/scanner_settings&gt;
&lt;/get_settings_response&gt;
</pre>

<h4 id="get_users">get_users</h4>

<p>
The client uses the "get_users" command to retrieve the list of user accounts
on the OpenVAS server.
</p>

<p>
The administrator response will contain as many user elements as there are user
accounts on the server. The user elements will consist of a name element, a role
element and a hosts element.
</p>

<p>
Command elements:<br>
None
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;get_users/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;get_users_response status="200" status_text="OK"&gt;
  &lt;user&gt;
    &lt;name&gt;foobar&lt;/name&gt;
    &lt;role&gt;User&lt;/role&gt;
    &lt;hosts allow="2"&gt;&lt;/hosts&gt;
  &lt;/user&gt;
&lt;/get_users_response&gt;
</pre>

<h4 id="get_version">get_version</h4>

<p>
The client uses the get_version command to request the protocol version which
may be used when communicating with this administrator. The administrator will
reply with a response code indicating success and the version.
</p>

<p>
The client is advised to use this command before using any other command.
</p>

<p>
Command elements:
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;get_version/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;get_version_response status="200" status_text="OK"&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/get_version_response&gt;
</pre>

<h4 id="help">help</h4>

<p>
The help command requests a human-readable description of the available OAP
commands. The administrator will reply with a response code indicating success
and a textual description of all commands.
</p>

<p>
Command elements:
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;help/&gt;
</pre>

<p>
<b>M:</b>
</p>

<pre>
&lt;help_response status="200" status_text="OK"&gt;
    AUTHENTICATE     Authenticate with the administrator.
    COMMANDS         Run a list of commands.
    CREATE_USER      Create a new user.
    DELETE_USER      Delete an existing user.
    DESCRIBE_AUTH    Get details about the used authentication methods.
    DESCRIBE_FEED    Get details of the NVT feed this administrator uses.
    GET_SETTINGS     Get scanner settings.
    GET_USERS        Get all users.
    GET_VERSION      Get the OpenVAS Administrator Protocol version.
    HELP             Get this help text.
    MODIFY_AUTH      Modify the authentication methods.
    MODIFY_USER      Modify a user.
    SYNC_FEED        Synchronize with an NVT feed.
&lt;/help_response&gt;
</pre>

<h4 id="modify_auth">modify_auth</h4>

<p>
The client uses the "modify_auth" command to modify the
authentication methods.
</p>

<p>
The status code in the administrator response will indicate whether or not the
requested action was successfully completed.
</p>

<p>
Command elements:
<ul>
  <li>group: An element identified by a name attribute containing at least one
      auth_conf_setting element with a key/value attribute pair describing individual
      settings for an authentication method.
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;modify_auth&gt;
  &lt;group name="Foo"&gt;
    &lt;auth_conf_setting key="Bar" value="Baz"/&gt;
  &lt;/group&gt;
&lt;/modify_auth&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;modify_auth_response status="200" status_text="OK"/&gt;
</pre>


<h4 id="modify_user">modify_user</h4>

<p>
The client uses the "modify_user" command to modify an user account on the
OpenVAS server. The client must supply an name for the user, a password to be
used for this user and a role that should be assigned to this user. It may
contain a hosts element describing the restrictions to be placed on the new
user. If the request does not contain a hosts element, the user account will be
unrestricted.
</p>

<p>
The status code in the administrator response will indicate whether or not the
requested action was successfully completed.
</p>

<p>
Command elements:
<ul>
  <li>name: The name of the user to be modified.
  <li>password: An element containing a new password for the user or an modify
      attribute with value 0 if the password should not be changed.
  <li>role: An element containing the new role for the new user.
  <li>hosts: An element containing the new rules to be applied for the user or
      an allow attribute with value 0 if the rules should not be changed.
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;modify_user&gt;
  &lt;name&gt;Foobar&lt;/name&gt;
  &lt;password modify="0"&gt;&lt;/password&gt;
  &lt;role&gt;Admin&lt;/role&gt;
  &lt;hosts allow="0"&gt;&lt;/hosts&gt;
&lt;/modify_user&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;modify_user_response status="200" status_text="OK"/&gt;
</pre>


<h4 id="sync_feed">sync_feed</h4>

<p>
The client uses the "sync_feed" command to request a synchronization with the
NVT feed service the administrator uses.
</p>

<p>
The status code in the administrator response will indicated whether or not the
requested action has been initiated.
</p>

<p>
Command elements:<br>
<ul>
  <li>(n/a)
</ul>
</p>

<h5>Example:</h5>

<p>
<b>C:</b>
</p>

<pre>
&lt;sync_feed/&gt;
</pre>

<p>
<b>A:</b>
</p>

<pre>
&lt;sync_feed_response status="202" status_text="OK, request submitted"/&gt;
</pre>

<h3>History</h3>

<ul>
<li> 2011-01-08 Matthew Mundell &lt;matthew.mundell@greenbone.net&gt;:<br>
     Change CREATE_USER response to 201.</li>
<li> 2011-01-07 Matthew Mundell &lt;matthew.mundell@greenbone.net&gt;:<br>
     Correct MODIFY_AUTH description and example.</li>
<li> 2010-12-07 Michael Wiegand &lt;michael.wiegand@greenbone.net&gt;:<br>
     Updated status.</li>
<li> 2010-11-23 Michael Wiegand &lt;michael.wiegand@greenbone.net&gt;:<br>
     Updated to reflect actual implementation.</li>
<li> 2009-04-27 Michael Wiegand &lt;michael.wiegand@greenbone.net&gt;:<br>
     Initial text.</li>
</ul>
