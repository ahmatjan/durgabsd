m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl $Id$
m4_dnl Description: Description of the NVT signature concept
m4_dnl
m4_dnl Authors:
m4_dnl Jan-Oliver Wagner <jan-oliver.wagner@greenbone.net>
m4_dnl Michael Wiegand <michael.wiegand@greenbone.net>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2011 Intevation GmbH
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or
m4_dnl modify it under the terms of the GNU General Public License
m4_dnl as published by the Free Software Foundation; either version 2
m4_dnl of the License, or (at your option) any later version.
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')


PAGE_START

<h2>Trusted NVTs and Report Formats &mdash; Managing Signatures and Trust in OpenVAS</h2>

<p>
This text explains what you need to do to allow your OpenVAS
Scanner to execute only signed NVTs with a trust level you
decide and to verify the report formats in your OpenVAS installation.
</p>

<p>
Signed NVTs are usually provided by NVT Feed Services. For example, the NVTs
contained in the <a href="openvas-nvt-feed.html">OpenVAS NVT Feed</a> are
signed by the "OpenVAS Transfer Integrity" key which you can find at the bottom
of this page.  If you have already installed OpenVAS, you can use the
"openvas-nvt-sync" command to synchronize your NVT collection with the OpenVAS
NVT Feed and receive signatures for all NVTs.
</p>

<p>
Some Feed Services may also provide signatures for additional
components like report formats. The OpenVAS NVT Feed for example
provides signatures for a number of report formats contained in the
default OpenVAS installation.
</p>

<h3>What is a signature (in simple words)?</h3>

<p>
A clever method is applied to compute a unique
checksum for a file. If only a single character in
the file changes, the checksum will change as well.
</p>

<p>
This checksum is digitally signed in a way
that you can test with a public certificate
whether a certain key was used to create the signature.
Such a key and certificate do always form a pair that
is related to each other.
</p>

<p>
If the signed file has been modified by a third party,
the signature will be broken. In this case you should
not trust the file.
</p>

<p>
If the signature is not broken, the question remains
if you trust the owner of the key. If you decided to do so
(and there any many ways and supporting technologies to manage
this), you can accept the file as trustworthy.
</p>

<h3>The signature format</h3>

<p>
The signatures for OpenVAS NVTs, their associated files and report
formats are standard so-called "ASCII-armored detached OpenPGP
signatures" created with <a href="http://www.gnupg.org">GnuPG</a>.
This format features:
</p>

<ul>
<li> multiple signer keys possible

<li> site administrators can decide which keys to trust

<li> signatures can be created and verified with widely available tools like GnuPG

<li> detached signatures do not require changes to the signed file (like inline
     signatures would)
</ul>

<p>
The name of the signature file is the name of the signed file with the
added extension ".asc".  That is, the name of the signature file for a
file "myscript.nasl" is "myscript.nasl.asc".
</p>

<h3>The NVT signature verification process</h3>

<p>
The signature verification of the OpenVAS Scanner is activated by
setting "nasl_no_signature_check = no" in
/etc/openvas/openvassd.conf.
</p>

<p>
At start-up time of the OpenVAS Scanner, all signatures are checked
for validity. Only fully trusted files are considered to be valid by
the scanner and thus loaded and made available to users of the scanner.
</p>

<p>
The trust check uses a special list of certificates managed for the OpenVAS
Scanner. It is a standard GnuPG keyring located by default in
/etc/openvas/gnupg.
</p>

<p>
When OpenVAS verifies a signature it checks all signatures
contained in the signature file and all signatures must be fully valid.
This means that all of the following criteria must be fulfilled for all
signatures:
</p>

<ol>
<li> The certificate must be present in the keyring.
<li> The key must be fully valid.
<li> The signature must be valid.
</ol>

<p>
If any of the signatures does not meet all of these criteria, the file
is considered untrustworthy and will not be executed at all.  If all
signatures meet the criteria, the script is trusted fully and may
execute any functions. If no signature file exists,
the script is not executed at all.
</p>


<h3>The report format signature verification process</h3>

<p>
OpenVAS Manger contains a number of predefined report formats which
allow you to view and download vulnerability scan results as a PDF
document or an XML document among other formats.
</p>

<p>
To help you verify that the report formats of your OpenVAS
installation are indeed the ones provided by the OpenVAS project and
have not been tampered with, the OpenVAS NVT Feed also contains
signatures for a number of report formats.
</p>

<p>
Please note that this verification requires you to specify your trust in
the signing key as noted above. If you have already set up your
OpenVAS Installation to verify NVT signatures there is nothing else
you need to do. If you have not, see below for instructions.
</p>

<p>
You can use the Greenbone Security Assistant to verify the signatures
by clicking on the "Verify Report Format" button in the list of report
formats.
</p>

<p>
If you want to use the OMP protocol to verify a report format directly
through OpenVAS Manager, please see the <a
href="http://www.openvas.org/omp-2-0.html#command_verify_report_format">verify_report_format</a>
command.
</p>


<h3>Initial preparation to set trust: create key</h3>

<p>
To express trust to keys that signed NVTs (see
"How to set trust" below) you need a signing key for
your OpenVAS installation. You can use an
existing key you already have, or you can generate a new one.
</p>

<p>
If you want to create a new or separate key for your OpenVAS
installation, please ensure that there is an "gnupg" directory in your
system configuration directory. If you have built your OpenVAS
installation with a distinct prefix and are unsure which directory
this refers to, use the "openvassd -y" command to display it. For the
examples on this page, it is assumed that you system configuration
directory is "/etc".
</p>

<p>
Once you have made sure that the /etc/openvas/gnupg exists, you can
use the following command to create a new key in this directory:
</p>

<pre>
# gpg --homedir=/etc/openvas/gnupg --gen-key
</pre>

<p>
GnuPG will guide you through the key creation process by asking a
number of questions about the key you wish to create. If you are
unsure, it is safe to choose the default provided by GnuPG.
</p>

<p>
This needs to be done only once for a OpenVAS Scanner installation.
</p>

<p>
The remaining examples on this page will assume that you have created
your key in the "/etc/openvas/gnupg" directory. If you are using a
different key or have create the key in a different directory, please
adjust the commands accordingly.
</p>

<h3>How to add a certificate</h3>

<p>
To add a certificate to the OpenVAS Scanner keyring issue this command:
</p>

<pre>
# gpg --homedir=/etc/openvas/gnupg --import certificate-file.asc
</pre>

<p>
For example, if you wanted to import the Transfer Integrity
certificate for the OpenVAS NVT Feed provided at the bottom of this
page, you could download and import it using the following two
commands:
</p>

<pre>
# wget http://www.openvas.org/OpenVAS_TI.asc
# gpg --homedir=/etc/openvas/gnupg --import OpenVAS_TI.asc
</pre>

<h3>How to set trust</h3>

<p>
For OpenVAS to trust a signature, the key used to create the signature
has to be valid. A certificate corresponding to this key that was just
imported has unknown validity and thus is not valid.
</p>

<p>
To mark a certificate as trusted for your purpose, you have to sign it.
The preferred way is to use local signatures that remain only in the
keyring of your OpenVAS Scanner installation.
</p>

<p>
To finally sign a certificate you need to know its KEY_ID.
You either get it from the table at the bottom or via a
"list-keys" command. Then you can locally sign:
</p>

<pre>
# gpg --homedir=/etc/openvas/gnupg --list-keys

# gpg --homedir=/etc/openvas/gnupg --lsign-key KEY_ID
</pre>

<p>
For example, to express your trust in the OpenVAS Transfer Integrity
you imported above, you could use the following command:

<pre>
# gpg --homedir=/etc/openvas/gnupg --lsign-key 48DB4530
</pre>

<p>
Before signing you should be absolutely sure
that you are signing the correct certificate.
You may use its fingerprint and other methods to
convince yourself.
</p>

<h3>How to remove a certificate</h3>

<p>
In case you decide to no longer trust a key, you can delete the key
from your keyring using the following command:
</p>

<pre>
# gpg --homedir=/etc/openvas/gnupg --delete-keys KEY_ID
</pre>

<h3>Manual signature verification</h3>

<p>
In case you want to manually verify the validity of a file, you need
to do the following:
</p>

<p>
To verify signatures on the command line, you can either run GnuPG:
</p>

<pre>
$ gpg --homedir=/etc/openvas/gnupg gpg --verify script.nasl.asc script.nasl
</pre>

<p>
Or you can use the standalone nasl interpreter:
</p>

<pre>
$ openvas-nasl -p script.nasl
</pre>

<p>
The -p Option means that the script is only parsed and not executed.
</p>

<p>
To debug the signature verification done by the nasl interpreter, use
the -T Option to enable the trace mode.  The signature verification will
leave some detailed information about the verification and the
signatures found in the trace file.
</p>

<h3>Overview on existing certificates</h3>

<table>
<tr>
<th>Certificate Name</th>
<th>ID</th>
<th>Download</th>
<th>Owner(s)</th>
<th>Description</th>
</tr>

<tr>
<td valign="top">OpenVAS: Transfer Integrity</td>
<td valign="top">48DB4530</td>
<td valign="top"><a href="OpenVAS_TI.asc">OpenVAS_TI.asc</a></td>
<td valign="top">OpenVAS Development Team</td>
<td valign="top">
<p>
This certificate signs .nasl and .inc scripts as they entered
the OpenVAS source code repository or as they were updated.
</p>

<p>
Thus, a valid signature means that the script has not been
modified on the way between the OpenVAS distribution point
and your OpenVAS installation.
</p>

<p>
The presence of a signature does NOT MEAN ANY JUDGEMENT
of the script itself. It only helps to verify integrity after transfer.
</p>

<p>
The scripts are WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
</p>
</td>
</tr>
</table>
