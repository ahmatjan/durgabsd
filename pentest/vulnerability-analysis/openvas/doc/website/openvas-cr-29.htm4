m4_dnl -*-html-*-
m4_include(`template.m4')

m4_dnl OpenVAS
m4_dnl
m4_dnl Description: OpenVAS Change Request #29
m4_dnl
m4_dnl Authors:
m4_dnl Laban Mwangi <lmwangi@penguinlabs.co.ke>
m4_dnl
m4_dnl Copyright:
m4_dnl Copyright (C) 2009 Penguinlans Ltd
m4_dnl
m4_dnl This program is free software; you can redistribute it and/or modify
m4_dnl it under the terms of the GNU General Public License version 2,
m4_dnl or, at your option, any later version as published by the Free
m4_dnl Software Foundation
m4_dnl
m4_dnl This program is distributed in the hope that it will be useful,
m4_dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
m4_dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
m4_dnl GNU General Public License for more details.
m4_dnl
m4_dnl You should have received a copy of the GNU General Public License
m4_dnl along with this program; if not, write to the Free Software
m4_dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

m4_define(`EN')
m4_define(`TITLE', `OpenVAS')
m4_define(`MAIN', `misc')



PAGE_START
<h2>OpenVAS Change Request #29: OpenVAS: Improve debug and error output</h2>

Status: Voted +4.  In progress.

<h3>Purpose</h3>

<p>
Improve error reporting across all subsystems from the current
output redirection of printf statement
</p>

<h3>References</h3>

<p>
Related Mail threads:<br />
<ul>
 <li><a href="http://lists.wald.intevation.org/pipermail/openvas-devel/2009-April/001477.html">Initial Patch</a> mail thread</li>
 <li>Second <a href="http://lists.wald.intevation.org/pipermail/openvas-devel/2009-May/001500.html">Patch</a> mail thread</li>
</ul>
While using the latest patch, you may want to modify a library to call glib logging functions.
A sample is included in the first patch (nasl_grammar and nasl_socket)
</p>

<h3>Rationale</h3>

<p>
Currently, output to .dump files is through printf statements
that openvasd redirects to files. The printf statements neither
have a timestamp nor an indicator of the source. Implementing C
Macros may not work as expected.
</p>

<h3>Effects</h3>

<p>
Allow for a systemwide at runtime toggling of debug/error messages and
possibly user defined formatting of error strings
</p>

<h3>Design and Implementation</h3>

<p>
The design goals should be to reuse the existing glib message output and
debug functions to accomplish this by using g_log for all logging within OpenVAS.<br />
<ul>
<li>Definition of various G_LOG_DOMAINs within the source files to identify library/subsystem/operation message sources. e.g. log_domain_ssl,</li>
<li>Use of predefined log domains such as</li>
<ul>
	<li>log_domain_otp - protocol dump</li>
	<li>log_domain_ssl - SSL debug messages</li>
	<li>log_domain_scripts - Dependency failures, Script errors</li>
	<li>log_domain_libnasl - Libnasl messages that can't be categorized by the above</li>
	<li>log_domain_libopenvas - Libopenvas messages that can't be categorized by the above</li>
	<li>log_domain_openvasd - openvasd messages that can't be categorized by the above</li>
</ul>
<li>We also have to add "if (!g_thread_supported ()) g_thread_init (NULL);" openvasd's main() to make logging thread safe. This means that we have to add gthread include and cflags to the autoconf scripts </li>
<li>Use of g_log_set_handler () in openvasd's main() to dynamically route messages to different logfiles depending on the domain and log_level (severity) giving flexibility surpassing apache's access and error logfiles </li>
<li>Using glib's IO Channels to handle log output to files</li>
<li>Definition of a prepend string in a config file much like PHP's html error prepend string based on the following proposal:</li>
	<ul>
	<li>%P: PID</li>
	<li>%{format}t: strftime format string (resolution is down to the second level)</li>
	<li>Use of __LINE__ and __FILE__ in debug messages - Left to the devloper's discretion </li>
	</ul>
<li>If we have time and manpower, use assert statements to catch bugs we wouldn't know about - Have a look at glib-Warnings-and-Assertions.html in glib's documentation</li>
</ul>
To make the logging process versatile, openvasd logging configuration should be stored in a configuration file. We can reuse glib's keyfiles for this.<br />
List of configuration options
<ul>
	<li>log domain</li>
    	<li>log prepend string</li>
      	<li>log file</li>
        <li>log level threshold</li>
</ul>
A sample configuration file
<pre>
	#libnasl >critical messages are logged to stderr
	[libnasl]
	prepend=%p
	file=-
	level=critical

	#openvasd >warning messages have a pid prepended and
	#logged to openvasd.log
	[openvasd]
	prepend=%p
	file=/var/log/openvasd.log
	level=warnings

	#All >defaultlevel messages  that do not match the above
	#have the pid prepended and are logged to openvas.log
	[*]
	prepend=%p
	file=/var/log/openvas.log
</pre>

</p>
<h3>History</h3>

<ul>
<li> 2009-07-27 Matthew Mundell &lt;matthew.mundell@intevation.de&gt;:<br/>
	 Remove quotes from sample.  Flush trailing whitespace.</li>
<li> 2009-07-16 Matthew Mundell &lt;matthew.mundell@intevation.de&gt;:<br/>
	 Update status.</li>
<li> 2009-05-14 Laban Mwangi &lt;lmwangi@penguinlabs.co.ke&gt;:<br/>
	 Adding predefined log_domains.</li>
<li> 2009-04-28 Laban Mwangi &lt;lmwangi@penguinlabs.co.ke&gt;:<br/>
	 Adding a configuration example.</li>
<li> 2009-04-25 Laban Mwangi &lt;lmwangi@penguinlabs.co.ke&gt;:<br/>
	 Adding details based on testing.</li>
<li> 2009-04-14 Laban Mwangi &lt;lmwangi@penguinlabs.co.ke&gt;:<br/>
	 Integrating with glib logging.</li>
<li> 2009-04-08 Laban Mwangi &lt;lmwangi@penguinlabs.co.ke&gt;:<br/>
	 Initial text.</li>
</ul>
